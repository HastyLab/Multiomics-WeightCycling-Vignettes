library(SoupX)
library(Seurat)
library(ggplot2)
library(dplyr)
library(clustree)
library(SingleR)
library(cowplot)
library(viridis)
library(formattable)
library(celldex)
library(velocyto.R)
library(SeuratWrappers)
library(plotly)
library(RColorBrewer)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(VAM)
library(msigdbr)
# Read datafiles into SoupX
Lean_soup <- load10X("10xCellRanger/Lean/")
library(Seurat)
library(ggplot2)
library(dplyr)
library(cowplot)
library(SeuratWrappers)
library(plotly)
library(RColorBrewer)
Seurat_list <- readRDS("../1_Preprocessing_Vignette/1_Preprocessing.rds")
Seurat_list
Seurat_list <- lapply(X = Seurat_list, FUN = function(x) {
x <- NormalizeData(x, assay="RNA", normalization.method = "LogNormalize", verbose = FALSE)
x <- FindVariableFeatures(x, assay="RNA", selection.method = "vst", nfeatures = 2000, verbose = FALSE)
})
Seurat_list <- lapply(X = Seurat_list, FUN = function(x) {
x <- NormalizeData(x, assay="ADT", normalization.method="CLR", verbose= FALSE)
x <- ScaleData(x, assay= "ADT", verbose= FALSE)
})
features <- SelectIntegrationFeatures(object.list = Seurat_list)
Seurat_list <- lapply(X = Seurat_list, FUN = function(x) {
x <- ScaleData(x, features = features, verbose = FALSE)
x <- RunPCA(x, features = features, verbose = FALSE)
})
anchors <- FindIntegrationAnchors(object.list = Seurat_list, anchor.features = features, reduction = "rpca", verbose=FALSE)
options(future.globals.maxSize= 5242880000) #Integration requires a larger global size limit than default. I've set it to 5gb.
anchors <- FindIntegrationAnchors(object.list = Seurat_list, anchor.features = features, reduction = "rpca", verbose=FALSE)
data.integrated <- IntegrateData(anchorset = anchors)
# Change default assay
DefaultAssay(data.integrated) <- "integrated"
# Scale the data and perform PCA on the integrated assay
data.integrated <- ScaleData(data.integrated, assay="integrated", verbose=FALSE)
data.integrated <- RunPCA(data.integrated, assay="integrated, npcs = 50, verbose=FALSE)
# Change default assay
DefaultAssay(data.integrated) <- "integrated"
# Scale the data and perform PCA on the integrated assay
data.integrated <- ScaleData(data.integrated, assay="integrated", verbose=FALSE)
data.integrated <- RunPCA(data.integrated, assay="integrated", npcs = 50, verbose=FALSE)
#Calculate the JackStraw visualization
data.integrated <- JackStraw(data.integrated, assay= "integrated", dims= 50, num.replicate= 100, verbose= FALSE)
#Score JackStraw
data.integrated <- ScoreJackStraw(data.integrated, dims = 1:50)
JackStrawPlot(data.integrated, dims=1:50) + theme(legend.position="bottom")
JackStrawPlot(data.integrated, dims=1:50) + theme(legend.position="bottom")
JackStrawPlot(data.integrated, dims=1:50) + theme(legend.position="bottom")
ElbowPlot(data.integrated, ndims=50)
ElbowPlot(data.integrated, ndims=50)
ElbowPlot(data.integrated, ndims=50)
data.integrated <- RunUMAP(data.integrated, dims=1:50)
data.integrated <- RunUMAP(data.integrated, dims=1:50, verbose=FALSE)
data.integrated <- RunTSNE(data.integrated, dims=1:50, verbose=FALSE)
data.integrated <- RunUMAP(data.integrated, dims=1:50, verbose=FALSE)
data.integrated <- RunUMAP(data.integrated, dims=1:50, n.components=3, reduction.name="umap3D", reduction.key="UMAP3D_")
data.integrated <- RunTSNE(data.integrated, dims=1:50, verbose=FALSE)
data.integrated <- RunTSNE(data.integrated, dims=1:50, dim.embed=3, reduction.name="tsne3D", reduction.key="tSNE3D_")
DimPlot(data.integrated, reduction="umap", label=F) + NoLegend()
DimPlot(data.integrated, reduction="umap", label=F) + NoLegend()
DimPlot(data.integrated, reduction="umap", label=F) + NoLegend()
d1 <- DimPlot(data.integrated, reduction="umap", label=F) + NoLegend() + labs(title="UMAP")
d2 <- DimPlot(data.integrated, reduction="tsne", label=F) + NoLegend() + labs(title="tSNE")
d1+d2
d1 <- DimPlot(data.integrated, reduction="umap", label=F) + NoLegend() + labs(subtitle="UMAP")
d2 <- DimPlot(data.integrated, reduction="tsne", label=F) + NoLegend() + labs(subtitle="tSNE")
d1+d2
test <- data.integrated
data.integrated <- readRDS("../HLC90/HLC_rPCA_v2_highlevel.rds")
d1 <- DimPlot(data.integrated, reduction="umap", label=F) + NoLegend() + labs(subtitle="UMAP")
d2 <- DimPlot(data.integrated, reduction="tsne", label=F) + NoLegend() + labs(subtitle="tSNE")
DimPlot(data.integrated, reduction="umap", label=F) + NoLegend() + labs(subtitle="UMAP")
data.integrated <- RunUMAP(data.integrated, dims=1:50, n.components=3, reduction.name="umap3D", reduction.key="UMAP3D_", verbose=FALSE)
data.integrated <- RunTSNE(data.integrated, dims=1:50, verbose=FALSE)
test2 <- test
data.integrated <- RunTSNE(data.integrated, dims=1:50, dim.embed=3, reduction.name="tsne3D", reduction.key="tSNE3D_")
d1 <- DimPlot(data.integrated, reduction="umap", label=F) + NoLegend() + labs(subtitle="UMAP")
d2 <- DimPlot(data.integrated, reduction="tsne", label=F) + NoLegend() + labs(subtitle="tSNE")
d1+d2
test2@reductions <- data.integrated@reductions
d1 <- DimPlot(test2, reduction="umap", label=F) + NoLegend() + labs(subtitle="UMAP")
d2 <- DimPlot(test2, reduction="tsne", label=F) + NoLegend() + labs(subtitle="tSNE")
d1+d2
d1 <- DimPlot(test2, reduction="umap", label=T) + NoLegend() + labs(subtitle="UMAP")
d2 <- DimPlot(test2, reduction="tsne", label=F) + NoLegend() + labs(subtitle="tSNE")
d1+d2
plot.data <- FetchData(object = data.integrated, vars = c("UMAP3D_1", "UMAP3D_2", "UMAP3D_3"))
colors=rainbow(21)
plot_ly(data = plot.data, #3D interactive plot of the data
x = ~UMAP3D_1, y = ~UMAP3D_2, z = ~UMAP3D_3,
type = "scatter3d",
mode = "markers",
marker = list(size = 0.5, width=0.5),
hoverinfo="text")
plot.data <- FetchData(object = data.integrated, vars = c("UMAP3D_1", "UMAP3D_2", "UMAP3D_3"))
plot_ly(data = plot.data, #3D interactive plot of the data
x = ~UMAP3D_1, y = ~UMAP3D_2, z = ~UMAP3D_3,
type = "scatter3d",
mode = "markers",
marker = list(size = 0.5, width=0.5),
hoverinfo="text")
plot.data2 <- FetchData(object = data.integrated, vars = c("tSNE3D_1", "tSNE3D_2", "tSNE3D_3"))
plot_ly(data = plot.data2, #3D interactive plot of the data
x = ~tSNE3D_1, y = ~tSNE3D_2, z = ~tSNE3D_3,
type = "scatter3d",
mode = "markers",
marker = list(size = 0.5, width=0.5),
hoverinfo="text")
data.integrated <- test2
d1 <- DimPlot(data.integrated, reduction="umap", label=F) + NoLegend() + labs(subtitle="UMAP")
d2 <- DimPlot(data.integrated, reduction="tsne", label=F) + NoLegend() + labs(subtitle="tSNE")
d1+d2
sessionInfo()
